import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;

public final class Request {
    private static Request instance = null;


    private List<Log> listIP = new ArrayList<Log>();
    private Set<String> uniqueIP = new HashSet<String>();


    private Map<String, Integer> countURL = new TreeMap<String, Integer>();
    private long numberQuery = 0;
    private long numberActive = 0;

    private String firstIP;


    public synchronized static Request getInstance() {
        if (instance == null) {
            instance = new Request();
        }
        return instance;
    }


    public synchronized String getReport() {
        String lastDate = (listIP.size() > 0 ? listIP.get(listIP.size()-1).getDate(): new Date()+"");
        String lastIP = getFirstIP();
        if(listIP.size() >= 1) {
            lastIP = listIP.get(listIP.size()-1).getSrc_ip();
        }
        String result = "<html><head><center><font size=6>Status query</font></center></head>"
                .concat("<table border = 1><tbody><tr><th>Total connection</th><th>Unique connection</th><th>Active connection</th><th>IP</th>")
                .concat("<th>Last Connections</th></tr></tbody><tr><th>" + numberQuery + "</th><th>" +  uniqueIP.size() +"</th><th>" + numberActive)
                .concat("</th><th>"+  lastIP +"</th><th>"+  lastDate + "</th></tr></table>")
                .concat("<table border = 1><tbody><tr><th>URL</th><th>CountURL</th></tr></tbody><tr>");
        for(Entry<String, Integer> k : countURL.entrySet()) {
            result += "<tr><th>" + k.getKey() + "</th>" +
                    "<th>" + k.getValue() + "</th></tr>";
        }
        result.concat("</table>");
        result += ("<table border = 1><tbody><tr><th>IP</th><th>URI</th><th>Timestamp</th><th>Send byte</th><th>Received byte</th>")
                .concat("<th>Speed(bytes/sec)</th></tr></tbody>");
        for(Log cip: listIP) {
            result +="<tr><th>" + cip.getSrc_ip() + "</th>" +
                    "<th>" + cip.getUri() + "</th>" +
                    "<th>" + cip.getDate()+ "</th>" +
                    "<th>" + cip.getSend_byte() + "</th>" +
                    "<th>" + cip.getReceived_byte() + "</th>" +
                    "<th>" + cip.getSpeed() + "</th></tr>";
        }
        result.concat("</tbody></table></html>");
        return result;
    }

    public synchronized void addConnection(Log cip) {
        if(listIP.size() > 15)
            listIP.remove(0);
        listIP.add(cip);
    }

    public synchronized void setCount() {
        numberQuery++;
    }

    public synchronized void setFirstIP(String ip) {
        firstIP = ip;
    }

    public synchronized String getFirstIP() {
        return firstIP;
    }

    public synchronized void putURLandCountHim(String url) {
        if(countURL.containsKey(url)) {
            countURL.put(url, new Integer(countURL.get(url)+1));
        } else {
            countURL.put(url, new Integer(1));
        }
    }

    /*
     * Unique connection are considered by the unique query
     */
    public synchronized void setCountUniqueConnection(String s) {
        if(!s.equals("/favicon.ico"))
            uniqueIP.add(s);
    }

    public synchronized void setNumberActive() {
        numberActive++;
    }

    public synchronized void dropNumberActive() {
        numberActive--;
    }


}
